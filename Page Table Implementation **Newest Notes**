What I think happens when you request memory:

  First, the MMU looks at the Translation Lookaside Buffer (TLB) for the given Virtual Address, if found,
    it gives the data stored there

  If not found in the TLB, it goes to the Translation Table

  Translation table does its magic and finds the address, and stores it in the TLB along with the current ASID

  If the Address Space Identifier (ASID) stored in an entry on the TLB is not the same as the current ASID, then
    the entry is not the same


  So, ASID is only there to not require the OS to flush out the caches on a context switch

  So when you switch contexts, you need to update the ASID along with the Translation Table Base Address




******* NOTE ********
The Cortex-a57 only supports 4KB and 64KB page sizes
Should the executable determine the page size?



So, each process has:

  Translation Table
  Address Space Identifier

So when I switch processes I need to swap out the Translation Table and Address Space Identifier


How does dynamic memory work?

  When I allocate memory, I get a pointer to a location that I can use. This pointer is static, I know its going to
    exist, therefore, the executable reserves space for the pointer. During run-time, the OS has to find a location
    in memory to point to. I need to find a virtual address to point to, and edit the translation table to translate
    the virtual address to an empty physical address.








Step 1:
  Create a process switch function
    This will change the TTBR0 to the new processes Translation Table Base Address
    it will also change the ASID to the new processes ASID

Step 2:
  Make the dynamic memory allocation functions edit the page table to add more memory
